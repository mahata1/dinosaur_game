#include <stdio.h>
#include <conio.h>
#include <windows.h>


#define c 219
int p=60,x=60,score=0;
BOOLEAN var_game_end = FALSE;
void clear_screen() {
    system("cls");
}
//  gotoxy function to move cursor to specific point
void gotoxy(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
//print_obstacle function displays obstacle
int print_obstacle(){
	//printf("obstacle%d",n_obstacle);
   	static int y=14;
	   if(x<=1 || var_game_end == TRUE)	{
   	x = 60;
   	var_game_end =FALSE;  	
   }
	 gotoxy(40,10);
    printf("score::%d",score);
    gotoxy(20,3);
    printf("Press X to exit:..");
    gotoxy(41,3);
    printf("Press J to jump:..");
	gotoxy(x,y);
	printf("%c   %c",c,c);
	gotoxy(x,y+1);
	printf("%c%c%c%c%c",c,c,c,c,c);
	gotoxy(x,y+2);
	printf("  %c  ",c);
	//speed can be controlled by settind differene decrement value for x
//printf("%d",x);
//	return x;
    p = x;
	if(x>=3 && x<=22){
		x-=3;
	}else {
		x-=2;
	}
	
    //x -=2;

   if (x<=10){
   	score++;
   }
   return x;
}

void print_dinosaur1(){
    printf("\n");
    printf("                   __      \n");
    printf("                  / ._)     \n");
    printf("          _.-----'  /      \n");
    printf("         /         )  \n");
    printf("      __/ (\\      /     \n");
    printf("     /__.-' /_/-/_/ \n");
    print_obstacle();
    Sleep(30);
}
void print_dinosaur2() {
    printf("\n");
    printf("                   __      \n");
    printf("                  / ._)     \n");
    printf("          _.-----'  /      \n");
    printf("         /         )  \n");
    printf("      __/ (\\      /     \n");
    printf("     /__.-' |_|-|_| \n");
    print_obstacle();
    Sleep(30);
}

void print_dinosaur3() {
    printf("\n");
    printf("                   __      \n");
    printf("                  / ._)     \n");
    printf("          _.-----'  /      \n");
    printf("         /         )  \n");
    printf("      __/ (\\      /     \n");
    printf("     /__.-' \\_\\-\\_\\ \n");
    print_obstacle();
	Sleep(30);
}
void print_dinosaur(){
	static int a=1;
	if(a%3==0){
		print_dinosaur1();
		
	} else if(a%3 == 1){
		print_dinosaur2();
	}else{
		print_dinosaur3();
	}
	a++;
}
void end_game(){
	printf("game end!");
}
void dino_ground(int ground_position) {
    int i = ground_position;
    	//gotoxy(0,13);
      //  print_ground();
       gotoxy(0,0);
    for (i = 1; i <= ground_position; i++) {
     printf("\n");
    }
    print_dinosaur();
    Sleep(10);
}

void dino_jump(int dinosaur_ground_position, int dinosaur_upper_position) {
    // code to move dinosaur upward
    
    int k, kk;
    for (k = dinosaur_ground_position; k >= dinosaur_upper_position; k--) {
        kk = k;
  //      gotoxy(0,13);
//        print_ground();
        gotoxy(0,0);
        while (kk > 1) {
            printf("\n");
            kk--;
        }
        print_dinosaur2();
        Sleep(10);
        clear_screen();
    }  
    
    // move dino downward
    for (k = dinosaur_upper_position; k <= dinosaur_ground_position; k++) {
        kk = k;
       // gotoxy(0,13);
        //print_ground();
        gotoxy(0,0);
        while (kk > 0) {
            printf("\n");
            kk--;
        }
        print_dinosaur2();
        Sleep(10);
        clear_screen();
    }
}
void run_dinosaur(){
		 
    int dinosaur_ground_position = 10;
    int dinosaur_upper_position = 4;
    int jump_flag = 0; // Variable to track if the jump has been initiated
    int j;
    char ch;
    
    while (1) {
       
      	BOOLEAN dino_jumped = FALSE;
        if (_kbhit()) {
            
            ch = _getch();
            if (ch == 'j' && !jump_flag) { // Check if 'j' is pressed and a jump is not already in progress
                jump_flag = 1; // Set the jump flag to indicate a jump is in progress
                dino_jump(dinosaur_ground_position, dinosaur_upper_position); // Start the jump
                jump_flag = 0; // Reset the jump flag since the jump is completed
            }
            // Clear the input buffer to avoid multiple key presses
            while (_kbhit()) {
                ch = _getch();
            }// this loop runs until key is being pressed.
            
            dino_jumped = TRUE;
        }
         if (ch =='x'){
         	gotoxy(40,5);
            end_game();
            gotoxy(50,5);
            printf("total score:%d ",score);
         	break;
		 }
		 
        dino_ground(dinosaur_ground_position); // Display in ground position
         if (p<=23 && dino_jumped==FALSE){
         	gotoxy(40,10);
            end_game();
            gotoxy(50,10);
            printf("total score %d ",score);
            var_game_end = TRUE;
			while(!_kbhit()){
				int a =1;
			}
			score = 0;
            //run_dinosaur();
		 }
        clear_screen();
    }
    
}

int main() {
    
	run_dinosaur();
    return 0;
}